HTTP API
An overview of the Arweave HTTP API.

The Arweave protocol is based on HTTP, so any existing http clients/libraries can be used to interface with the network, for example Axios or Fetch for JavaScript, Guzzle for PHP, etc.

The default port is 1984.

Requests and queries can be sent to any Arweave node directly using their IP address, for example http://159.65.213.43:1984/info. Hostnames can also be used if configured with DNS, for example https://arweave.net/info.

Sample Request
cURL
JavaScript (Fetch)
NodeJS
Copy
curl --request GET \
  --url 'https://arweave.net/info'
Integrations
Arweave specific wrappers and clients are currently in development to simplify common operations and API interactions, there are currently integrations for Go, PHP, Scala (which can also be used with Java and C#) and JavaScript/TypeScript/NodeJS.

Schema
Common data structures, formats, and processes explained.

Block Format
block height < 269510
block height >= 269510, < 422250
block height >= 422250, < 812970
block height >= 812970, < 1132210
block height >= 1132210
Copy
{
  "nonce": "AAEBAAABAQAAAQAAAQEBAAEAAAABAQABAQABAAEAAAEBAAAAAQAAAAAAAQAAAQEBAAEBAAEBAQEBAQEAAQEBAAABAQEAAQAAAQABAAABAAAAAAEBAQEBAAABAQEAAAAAAAABAQAAAQAAAQEAAQABAQABAQEAAAABAAABAQABAQEAAAEBAQABAQEBAQEBAAABAQEAAAABAQABAAABAAEAAQEBAQAAAAABAQABAQAAAAAAAAABAQABAAEBAAEAAQABAQABAAEBAQEBAAEAAQABAAABAQEBAQAAAQABAQEBAAEBAQAAAQEBAQABAAEBAQEBAAAAAAABAAEAAAEAAAEAAAEBAAAAAAEAAQABAAAAAAABAQABAQAAAAEBAQAAAAABAAABAAEBAQEAAAAAAQAAAQABAQABAAEAAQABAQAAAAEBAQAAAQAAAAEBAAEBAAEBAQEAAAEBAQAAAQAAAAABAAEAAQEAAQ",
  "previous_block": "V6YjG8G3he0JIIwRtzTccX39rS0jH-jOqUJy6rxrVAHY0RT0AVhG8K22wCDxy1A0",
  "timestamp": 1528500720,
  "last_retarget": 1528500720,
  "diff": 31,
  "height": 100,
  "hash": "AAAAANsEvzGbICpfAj3NN41_ox--2cNxkEhAo0aggpDPkY7zru29g24uMWUP9hTa",
  "indep_hash": "",
  "txs": ["7BoxcxiJIjTwUp3JXp0xRJQXf6hZtyJj1kjGNiEl5A8"],
  "wallet_list": "ph2FDDuQjNbca34tz7vP9X5Xve2EGJi2ZgFqhMITAdw",
  "reward_addr": "em8MfGRInwWEAQnE6b50ENaFOf-0to4Pbygng1ilWGQ",
  "tags": [],
  "reward_pool": 60770606104,
  "weave_size": 599058,
  "block_size": 0
}
Transaction Format
Nodes and gateways accept transactions through the POST /tx endpoint. The body must be a JSON encoding of a transaction. Amounts are specified in winstons.

Transaction and block identifiers and wallet addresses, among some other fields, are encoded as Base64URL strings when sent over HTTP or put in the URLs or displayed in the block explorers.

Base64URL is case-sensitive.

For example, T414mkfW-EQWEwPtk__LMJAgawNdxZfdjxhGPQKMwDQ, t414mkfW-EQWEwPtk__LMJAgawNdxZfdjxhGPQKMwDQ, and t414mkfw-eqwewptk__lmjagawndxzfdjxhgpqkmwdq are three different addresses. It is impossible to recover tokens sent to a different case of the same address.

A transaction may be used for uploading data, transferring tokens, or both.

See the sample transactions below for full examples.

Field Definitions
Name
Required
Serialization Format
Value
format

Yes

integer

Currently supported formats are `1` and `2` (often referred to as v1 and v2 respectively). The v1 format is deprecated.

id

Yes

Base64URL string

A SHA-256 hash of the transaction signature.

last_tx

Yes

Base64URL string

An anchor - a protection against replay attacks. It may be either a hash of one of the last 50 blocks or the last outgoing transaction ID from the sending wallet. If this is the first transaction from the wallet then an empty string may be used. The recommended way is to use the value returned by GET /tx_anchor. Two different transactions can have the same last_tx if a block hash is used.

owner

Yes

Base64URL string

The full RSA modulus value of the sending wallet. The modulus is the n value from the JWK. The RSA public key.

tags

No

array of objects

A list of name-value pairs, each pair is serialized as {"name": "a BaseURL string", "value":" a Base64URL string"}. If no tags are being used then use an empty array []. The total size of the names and values may not exceed 2048 bytes. Tags might be useful for attaching a message to a transaction sent to another wallet, for example a reference number or identifier to help account for the transaction.

target

No

Base64URL string

The target address to send tokens to (if required). If no tokens are being transferred to another wallet then use an empty string. Note that sending tokens to the owner address is not supported. The address is the SHA-256 hash of the RSA public key.

quantity

No

Numerical string (winstons)

The amount to transfer from the owner wallet to the target wallet address (if required).

data_root

No

Base64URL string

Only use with v2 transactions. The merkle root of the transaction data. If there is no data then use an empty string.

data_size

No

Numerical string (bytes)

Only use with v2 transactions. The size in bytes of the transactin data. Use "0" if there is no data. The string representation of the number must not exceed 21 bytes.

data

No

Base64URL string

The data to be submitted. If no data is being submitted then use an empty string. For v2 transactions there is no need, although it is possible, to use this field even if there is data (means, data_size > 0 and data_root is not empty). In v1 transactions, data cannot be bigger than 10 MiB. In v2 transactions, the limit is decided by the nodes. At the time this was written, all nodes in the network accept up to 12 MiB of data via this field.

reward

Yes

Numerical string (winstons)

The transaction fee. See the price endpoint docs for more info.

signature

Yes

Base64URL string

An RSA signature of a merkle root of the SHA-384 hashes of transaction fields (except for id, which is the hash of the signature). See Transaction Signing for more.

Sample Transactions
Data transaction
Wallet to wallet AR Transfer
Wallet to wallet AR transfer with data
Copy
{
  "format": 2,
  "id": "BNttzDav3jHVnNiV7nYbQv-GY0HQ-4XXsdkE5K9ylHQ",
  "last_tx": "jUcuEDZQy2fC6T3fHnGfYsw0D0Zl4NfuaXfwBOLiQtA",
  "owner": "posmE...psEok",
  "tags": [],
  "target": "",
  "quantity": "0",
  "data_root": "PGh0b...RtbD4",
  "data": "",
  "data_size": "1234235",
  "reward": "124145681682",
  "signature": "HZRG_...jRGB-M"
}
Transaction Signing
Transaction signatures are generated by computing a merkle root of the SHA-384 hashes of transaction fields: format, owner , target , data_root, data_size, quantity, reward, last_tx, tags, then signing the hash. Signatures are RSA-PSS with SHA-256 as the hashing function.

Key Format
Arweave uses the JSON Web Key (JWK) format (RFC 7517) with 4096 length RSA-PSS keys. This JWK format allows for cryptographic keys to be represented as a JSON object where each property represents a property of the underlying cryptographic key. It's widely supported with libraries for most popular languages. It's possible to convert a JWK to a PEM file or other crypto key file format, support for this this will vary from language to language. If you're generating your own keys manually the public exponent (e) must be 65537. If any other value is used the transactions signed by these keys will be invalid and rejected.

Addressing
The n value is the public modulus and is used as the transaction owner field, and the address of a wallet is a Base64URL encoded SHA-256 hash of the n value from the JWK.

Sample JWK
The address for this wallet is GRQ7swQO1AMyFgnuAPI7AvGQlW3lzuQuwlJbIpWV7xk.

Copy
{
  "kty": "RSA",
  "e": "AQAB",
  "n": "ovFF6EbOtXeg7VnojIgtChgxfU6GZ16JjVj5JFHh6NGHJnq4p059BnMphcDx1mqb3yxM73FxhEszSFLcJiPzway6eIDiXuYiT-Sf_0Wl6_wDLvEmlz43psp7WYJumwpaSyiI_1FWmOVQnTnoAIKaOYKVqzUlteiECQj7XjJl0MZH16RlEfVqVpJ_8Ier4_QXIJ8Y3pe2KF3Lg9UANFU97nuvEM94CSzX-0WIju6Lykt3DBb2YtFFg4bJjOFv3T38nCZmDh8lYjm25_1qILalsB0XRoDxQy9FLxWb4zd09JsDhL0EYAQ_hNfOnQFVOBtYEHVYMCHYH6GoTcNgxmUkZPk4AfpAqZmjDzKfVJrw4Fr68pPTEQOQEzBcIWp61P21BSkhqO4QuFinkQsSH6NdTB_3FpbhYf34Hjf-iH7hdpdWo4aoRLb8eZeZcqBRZoRmlhQnOD-PVxQR_vb9rjXSjGkCWwRbsurVLWdBh_FQn0S9Q6EHqiV8nbW-R0Rk2E76JwgMFkqGUtZj8DeEqXJ2jlAvuzp56fXeAViPEtvUj1HheO8O3LxdVYCiapWWKq4qQVoRzdiyvydYSmbztgFUhekvmjNkxLNKOh71i3hFtoXycegqZ6izrUGoF2oD24lsTKsV5lV5pwfmUjVvxtHZm54bJIMfUDYbOV6yeDjYBb8",
  "d": "EePSrJeFn4f0a8rozPEwnMCeQmdKO3Q2PwYrSJES8Ch9IbzspDXqZThksTJHeya2WXD4O3vlnkRRa5npYOimnTeVO6DO-eNjlgkAhhsEBh5jzRYeChIDMzVdCK1Y7n3a_xCCxiGMk_nteW2_qrqsKy9KtoL90nSmdoV9b9CxvBPhFGyQykF7POkV0fdbaIpGtcayCNJ4ZgMyUpWi0ZwgUhxTUtGsmLlLN2Phg-vt_jZ96h5lS-E1NCUq4ORpj018fDp9DwTdamTyz5LTwaa8F1OCWDPVCW7Ztjs1o-NVXHvejYbhQZeFz9SP804PqLrb1ubDWXmFzKdHns4aRH4bWivh9L8HwSJUl5UEXprJUpYilT0tb3VauI7Cih2LBfhU3fUIDJFYm_j9etgNcPlqt64T7_TI8elgj7-sciXa1XEqIje9Mn8spxT6lpn4nhxJ9qelERCJwiWbuPnW2VsJHeqXZTly52KQEP_UBC4z8a0tDm7HIQw7WQ-OAuNUOu8ongOHaOexkqKYIcF3f812sOIVEJufoBXUUTIvJk-buH0ytgtTjkrO64zZeIvFHa1MFU-6UXh8jipSZ617znNR2Pc1-l3s7pACdbXvy2-5VWE3psRr1L5HM4KNwm6Rs5BXXqBSifzfiJ5qNGqKabfXvPXI8wYyl3mhUQtHW6sUUl0",
  "p": "0q_DP_FzSi8JEd-NNXoIaeL5MOxmNiXmDHGNxP3noKPyr-N6h3CrK5G59Rj2vWAJMhKToz1eSQ1p0-X0Ku2DvdT5LQOGIXVPtojw0OcOI8G8SoqMGAGehaLsnV3vexwtwjLfIM99XccKAxWMA1SMuL48nuBpMUhO0MlagbrL5vfpKB9kL7XCQqspAnN_vBmQZGWYczQmBgfC6v6xGQV3xHJmL--dn-qF2XU9pKuqd0J-cKYcdLPrccdJtGLid4nrSOTDfEbr77IUI5VGWV8CFJ-n8Vki-GwUxUkJpIoRyp5DxnYtSJb7cV-xOf7kBTCEUFn5B8fb2q-d8011cgnp5Q",
  "q": "xfzB-Yf4fa2y2q4ubJCJA5H-IG9-mr7fVRTUbj-gTqVL-I7MCDIImdAPbA-3EoIR5H70GVbAFGQJyYDq6eDeTbNs1zfnU0JPurASE3fKbOpoRdLwXwaSdRJRP9qnqUe-BzuloIzWc-dI-6TJxmHUSA1X9CtHvIdfNdKPCVFKUMrb1bv5arAI8tRbNRfy3tnbiw4wfKhYEQ1e6RPpxAR5F4We9RJ81-sIlfAy7WfliwmcGmgcPNdUinGR299CiVYKf5ktoqGFQ9n6K-v4gNZV23f33-tuD8pMVxyc3xG34j4frH57bsbm7v8Qz-92ZxHWzOUgxIVhGgSaa4E51d9m0w",
  "dp": "yArepo4I230BbZkHKKlv56n81PkAq5UccuA2rb4u-ZXxThP9OTA_NiUtnYxQassOsB53U91m8pHr06hZR5ExL0NSO-1Go-oQ_83SaWeZQ1YmA9i83-ZZr6VcaKbSReAhimxm825PKIVd-kOxJ1BWNOtb_7Yv6v0u6IrmhproE6t8E_6KT8qSYl7Fl3A27lCPiuPz9h6jo8Imzp15ZbqNV1cPs6Ad18MDx8_L8diVCJt4FlmCV0Sl3uhMERx6zumDHzkma4-jYXmCKa8Ilr7g6NgWy8_Ipnto1VFd-H6oGexficaXhH7my2UCj4B23H6OgwSKsVqQY3mvzV3Uj6zeCQ",
  "dq": "a0_ey6OZWnWFleYHH60PtrGw7l_AXZvLbVBG_CLcfwQ1M1oi2OZVpxkQ4t95uTxq-lCdegZ9QhAfBessaOwLUk5IVjbk2Un98RByG784JuS-8-mrg7YKOA5fn56idax_IWiBE46Cxnu8ITlmbHKmHw-sdpnm3hb50jB4evJmt3fcw_KI8_zKPORBM3vxljy7NJnSSh7s7QE0Sl0Svb427Drut6L3rAimtK5mzCseTcg9pkp707ZbClcYWfafF9VdB2A9TgMCOo6xfJEANsT18GkMH4B6PXDHBAhsNrRh2O0XOeWsfZStoyj5Mdt3b9JJfPFMW3h38yQ_lrmKYZQfJQ",
  "qi": "aDsPYxE-JBYsYhCYXSU7WsCrnFxNsRpFMcYXdmdryYIdQUpeemChDGzVJXLnJhE4cAS9TtLcNg82xZSKZvHrnkbFpRfSJxzEnvIXW4V0LHkxkxbmM0e9B7UrpYm6LKtvEY6I7L8wHFpHdOwV6NjY925oULEV156X0r55V7N0XF-jy3rbm71DCWRh6IDRghhCZQ3aNgJxE-OtnABqasaY6CQnTDRXLkGE0kq9GCx85-92fQLHMzvrMhr9m_2MHYJ_gZehL4j95CQzhD3Zh602D0YYYwRSsU4h5HGjlmN52pe-rfTLgwCJq5295s7qUP8TTMzbZAOM_hehksHpAaFghA"
}
AR and Winston
Winston is the smallest possible unit of AR, similar to a satoshi in Bitcoin, or wei in Ethereum.

1 AR = 1000000000000 Winston (12 zeros) and 1 Winston = 0.000000000001 AR.

The HTTP API will return all amounts as winston strings, this is to allow for easy interoperability between environments that do not accommodate arbitrary-precision arithmetic.

JavaScript for example stores all numbers as double precision floating point values and as such cannot natively express the integer number of winston. Providing these values as strings allows them to be directly loaded into most 'bignum' libraries.

Transactions
Endpoints for interacting with transactions and related resources.

Get Transaction by ID
GET https://arweave.net/tx/{id}

Get a transaction by its ID.

Path Parameters
Name
Type
Description
id*

String

Transaction ID

Headers
Name
Type
Description
Accept

String

application/json

200
202
400
404
Copy
{
  "format": 2,
  "id": "BNttzDav3jHVnNiV7nYbQv-GY0HQ-4XXsdkE5K9ylHQ",
  "last_tx": "jUcuEDZQy2fC6T3fHnGfYsw0D0Zl4NfuaXfwBOLiQtA",
  "owner": "posmE...psEok",
  "tags": [],
  "target": "",
  "quantity": "0",
  "data_root": "PGh0b...RtbD4",
  "data_size": "123",
  "reward": "124145681682",
  "signature": "HZRG_...jRGB-M"
}
The quantity and reward values are always represented as winston strings.

See the Transaction Format section for details about transaction structure and contents, with examples.

Get Transaction Status
GET https://arweave.net/tx/{id}/status

Gets the status of a transaction

Path Parameters
Name
Type
Description
id*

String

Transaction ID

Headers
Name
Type
Description
Accept

String

application/json

200
Copy
{
  "block_height": 641606,
  "block_indep_hash": "akLaom7XAKYvIW7HPCtCqSCgYTGAa0zjer6FXvF8lX0pAPzcHMZj4XnQq0jaedT6",
  "number_of_confirmations": 12
}
Get Transaction Field
GET https://arweave.net/tx/{id}/{field}

Get a single field from a transaction.

Path Parameters
Name
Type
Description
id*

String

Transaction ID

id*

String

Field name, acceptable values: id, last_tx, owner, tags, target, quantity, data, data_root, data_size, reward, signature.

Headers
Name
Type
Description
Accept

String

application/json

200
202
400
404
Copy
jUcuEDZQy2fC6T3fHnGfYsw0D0Zl4NfuaXfwBOLiQtA
Get Transaction Data
GET https://arweave.net/{id}

Get the decoded data from a transaction.

The Content-Type will default to the one specified in a tag with tag-name Content-Type.

You can also get the data with a different Content-Type response, by doing:

Get Transaction Data with extension
GET https://arweave.net/tx/{id}/data.{extension}

Get the decoded data from a transaction with specific mime extension.

Path Parameters
Name
Type
Description
id*

String

Transaction ID

extension*

String

Mime extension (example: ".html", ".txt", ".jpg")

200
202
400
404
Any extension can be specified depending on the clients use case. Web pages can be requested with data.html

Copy
<html
  lang="en-GB"
  class="b-pw-1280 no-touch orb-js id-svg bbcdotcom ads-enabled bbcdotcom-init bbcdotcom-responsive bbcdotcom-async bbcdotcom-ads-enabled orb-more-loaded  bbcdotcom-group-5"
  id="responsive-news"
>
  <meta charset="utf-8" />
  <meta
    name="viewport"
    content="width=device-width, initial-scale=1, user-scalable=1"
  />
  ...
</html>
A Content-Type tag-name can be submitted with a transaction, the tag-value will then be used as the Content-Type header when serving the data response, this allows you to submit binary files like images and have them served with correct content type headers over HTTP.

The default Content-Type is application/octet-stream.

Get Transaction Price
GET https://arweave.net/price/{bytes}/{target}

This endpoint is used to calculate the minimum fee (reward) for a transaction of a specific size, and possibly to a specific address.This endpoint should always be used to calculate transaction fees as closely to the submission time as possible. Pricing is dynamic and determined by the network, so it's not always possible to accurately calculate prices offline or ahead of time. Transactions with a fee that's too low will simply be rejected.

Path Parameters
Name
Type
Description
bytes*

String

The number of bytes to go into the transaction data field.
If sending AR to another wallet with no data attached, then 0 should be used.

target

String

The target wallet address if sending AR to another wallet.

Headers
Name
Type
Description
Accept

String

application/json

200
Copy
10000
An extra fee is taken for the first transaction sent to a new wallet address. This is intentional and to discourage wallet spam.

Examples
To get a fee for sending 10 AR to a wallet with address abc consult /price/0/abc.

To upload 123 bytes without transferring tokens consult /price/123.

To send some AR to the "abc" wallet and upload 123 bytes of data query /price/123/abc.

Submit a transaction
POST https://arweave.net/tx

Submit a new transaction to the network.The request body should be a JSON object with the attributes described in Transaction Format.

Headers
Name
Type
Description
Accept

String

application/json

Content-Type

String

application/json

200
208
400
429
503
Copy
OK
Find more information about these fields and examples in the Transaction Format section.

Wallets
Endpoints for getting information about a wallet.

Get a Wallet Balance
GET https://arweave.net/wallet/{address}/balance

Get the balance for a given wallet. Unknown wallet addresses will simply return 0.

Path Parameters
Name
Type
Description
address

String

Wallet address

200
400
Copy
9554799572505
Get Last Transaction ID
GET https://arweave.net/wallet/{address}/last_tx

Get the last outgoing transaction for the given wallet address.

Path Parameters
Name
Type
Description
address

String

Wallet address

200
400
Copy
7SRpf0dWDqN4hbnCMPkdg02u_tzyMBtqwjDBy3EU9dg
Blocks
Endpoints for getting blocks and block data.

Get Block by (hash) ID
GET https://arweave.net/block/hash/{id}

Get a block by its id/hash (idep_hash).

Path Parameters
Name
Type
Description
id

String

The block hash (indep_hash).

Headers
Name
Type
Description
Accept

String

application/json

X-Block-Format

String

2

200
404
Copy
{
  "nonce": "W3Jy4wp2LVbDFhGX_hUjRQZCkTdEbKxz45E5OVe52Lo",
  "previous_block": "YuTyalVBTNB9t5KhuRezcIgxVz9PbQsbrcY4Tpkiu8XBPgglGM_Yql5qZd0c9PVG",
  "timestamp": 1586440919,
  "last_retarget": 1586440919,
  "diff": "115792089039110416381168389782714091630053560834545856346499935466490404274176",
  "height": 422250,
  "hash": "_____8422fLZnBsEsxtwEdpi8GZDHVT-aFlqroQDG44",
  "indep_hash": "5VTARz7bwDO4GqviCSI9JXm8_JOtoQwF-QCZm0Gt2gVgwdzSY3brOtOD46bjMz09",
  "txs": ["IRPCjc_ws7aS5GWp4mwR2k-HuQy-zT_GWrgR6kRdbmI"],
  "tx_root": "lsoo-p3Tj7oblZ-54WVPHoVguqgw5rA9Jf3lLH6H8zY",
  "tx_tree": [],
  "wallet_list": "N5NJtXhgH9bPmXoSopehcr_zqwyPjjg3igel0V8G1DdLk_BYdoRVIBsqjVA9JmFc",
  "reward_addr": "Oox7m4HIcVhUtMd6AUuGtlaOoSCmREUNPyyKQCbz4d4",
  "tags": [],
  "reward_pool": 3026104059201252,
  "weave_size": 407672420044,
  "block_size": 937455,
  "cumulative_diff": "99416580392277",
  "hash_list_merkle": "akSjDrBKPuepJMOhO_S9C-iFp5zn9Glv57HGdN_WPqEToWC0Ukb37Gzs4PDA7oLU",
  "poa": {
    "option": "1",
    "tx_path": "xZ6vhVXw_0BlD-Xkv3KtfnJeLXykjkjUrwcPsXw2JUnie021At7I-fMZkt5EF_xOHtcdq4RIqXto1gwFAM5eZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfDSbuKpWzKZ9HP_N2I4gX6cUujNsJtelJULjHmbZp0XzmkBljlK4S1PMlSrTePIjfJdRfqvFNE8idpnj69X1P0zAfwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAn4ybxD6lgdArqnPJzs7t8bU-7KfEb1YqpAOvbr6q3vmP-MWnCTWZJKTL90azeYZmHrTMx-iutuT6bP6CUC7zgHAfGgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmTpFIGvz18gKl5rZ6p2Ve4yVeRzWNwibyVTKz80HSBYprfIpVJk9oRG3E5q1xRn5wErqyH2vFLbsLxDqKcR0vLunBwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfDwBRWXT_vDxcaBxGmihJwlU_n_PFBCOsP-Lx3hSG6H6UGesIMAEYMmd2c5QixR-fCimhm_9S582cLzSUffsrAHliQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmP-RTrBhY9xCC1yywyehB7X6EmlBjyQBqm0y1L9Ex_dkswkf50rG-LE29UJP4st0bzFthHukfHvvWZY3bgIiog3L7gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfD3YxQguhfH8daMBAQrveQq3MMp4iKB3khk5mbU34Ckl1q8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJj_kQ",
    "data_path": "bTVpffiN3SSDeqBEJpKiXegQGKKnprS_AFMh6zz4QRIU-8dJuvFzyKxqjkDHQvtKl0Eajfm18yZsjaAJkNhbAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAOH0cuoLq1CTbSelF9C59C-fcO3a3ywoceaNxRl4nQQH1BuwcpiNdDdZvEz6Pfk5wKbnsF_VwVIgrfcLZgsxoKwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAefOoaNyW7ORmrzbZ5O7midzLByHooxjM5oEMJfZbQsY9mKS14G9fUEFmFaCPPJX6EXVGrUwROzDIWfHf8oHErAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAktmxYyC7BSV-MULrjzgdJJYfJY7lDFcKe3mo_EX19xoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAA",
    "chunk": "aHQ6OTBweH1..."
  }
}
Get Block by Height
GET https://arweave.net/block/height/{height}

Get a block by its height.

Path Parameters
Name
Type
Description
height*

String

The block height.

Headers
Name
Type
Description
Accept

String

application/json

X-Block-Format

String

2

200
404
Copy
{
  "nonce": "W3Jy4wp2LVbDFhGX_hUjRQZCkTdEbKxz45E5OVe52Lo",
  "previous_block": "YuTyalVBTNB9t5KhuRezcIgxVz9PbQsbrcY4Tpkiu8XBPgglGM_Yql5qZd0c9PVG",
  "timestamp": 1586440919,
  "last_retarget": 1586440919,
  "diff": "115792089039110416381168389782714091630053560834545856346499935466490404274176",
  "height": 422250,
  "hash": "_____8422fLZnBsEsxtwEdpi8GZDHVT-aFlqroQDG44",
  "indep_hash": "5VTARz7bwDO4GqviCSI9JXm8_JOtoQwF-QCZm0Gt2gVgwdzSY3brOtOD46bjMz09",
  "txs": ["IRPCjc_ws7aS5GWp4mwR2k-HuQy-zT_GWrgR6kRdbmI"],
  "tx_root": "lsoo-p3Tj7oblZ-54WVPHoVguqgw5rA9Jf3lLH6H8zY",
  "tx_tree": [],
  "wallet_list": "N5NJtXhgH9bPmXoSopehcr_zqwyPjjg3igel0V8G1DdLk_BYdoRVIBsqjVA9JmFc",
  "reward_addr": "Oox7m4HIcVhUtMd6AUuGtlaOoSCmREUNPyyKQCbz4d4",
  "tags": [],
  "reward_pool": 3026104059201252,
  "weave_size": 407672420044,
  "block_size": 937455,
  "cumulative_diff": "99416580392277",
  "hash_list_merkle": "akSjDrBKPuepJMOhO_S9C-iFp5zn9Glv57HGdN_WPqEToWC0Ukb37Gzs4PDA7oLU",
  "poa": {
    "option": "1",
    "tx_path": "xZ6vhVXw_0BlD-Xkv3KtfnJeLXykjkjUrwcPsXw2JUnie021At7I-fMZkt5EF_xOHtcdq4RIqXto1gwFAM5eZgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfDSbuKpWzKZ9HP_N2I4gX6cUujNsJtelJULjHmbZp0XzmkBljlK4S1PMlSrTePIjfJdRfqvFNE8idpnj69X1P0zAfwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAn4ybxD6lgdArqnPJzs7t8bU-7KfEb1YqpAOvbr6q3vmP-MWnCTWZJKTL90azeYZmHrTMx-iutuT6bP6CUC7zgHAfGgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmTpFIGvz18gKl5rZ6p2Ve4yVeRzWNwibyVTKz80HSBYprfIpVJk9oRG3E5q1xRn5wErqyH2vFLbsLxDqKcR0vLunBwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfDwBRWXT_vDxcaBxGmihJwlU_n_PFBCOsP-Lx3hSG6H6UGesIMAEYMmd2c5QixR-fCimhm_9S582cLzSUffsrAHliQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAmP-RTrBhY9xCC1yywyehB7X6EmlBjyQBqm0y1L9Ex_dkswkf50rG-LE29UJP4st0bzFthHukfHvvWZY3bgIiog3L7gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAfD3YxQguhfH8daMBAQrveQq3MMp4iKB3khk5mbU34Ckl1q8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJj_kQ",
    "data_path": "bTVpffiN3SSDeqBEJpKiXegQGKKnprS_AFMh6zz4QRIU-8dJuvFzyKxqjkDHQvtKl0Eajfm18yZsjaAJkNhbAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAOH0cuoLq1CTbSelF9C59C-fcO3a3ywoceaNxRl4nQQH1BuwcpiNdDdZvEz6Pfk5wKbnsF_VwVIgrfcLZgsxoKwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAefOoaNyW7ORmrzbZ5O7midzLByHooxjM5oEMJfZbQsY9mKS14G9fUEFmFaCPPJX6EXVGrUwROzDIWfHf8oHErAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAktmxYyC7BSV-MULrjzgdJJYfJY7lDFcKe3mo_EX19xoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAA",
    "chunk": "aHQ6OTB..."
  }
}
Network and Node State
Endpoints for getting information about the current network and node state.

Network Info
GET https://arweave.net/info

Get the current network information including height, current block, and other properties.

Headers
Name
Type
Description
Accept

String

application/json

200
Copy
{
  "network": "arweave.N.1",
  "version": 5,
  "release": 43,
  "height": 551511,
  "current": "XIDpYbc3b5iuiqclSl_Hrx263Sd4zzmrNja1cvFlqNWUGuyymhhGZYI4WMsID1K3",
  "blocks": 97375,
  "peers": 64,
  "queue_length": 0,
  "node_state_latency": 18
}
Peer list
GET https://arweave.net/peers

Get the list of peers from the node. Nodes can only respond with peers they currently know about, so this will not be an exhaustive or complete list of nodes on the network.

Headers
Name
Type
Description
Accept

String

application/json

200
Copy
["127.0.0.1:1984", "0.0.0.0:1984"]
Chunks
Upload Chunks
POST https://arweave.net/chunk

Upload Data Chunks.

Example json-data payload:

Headers
Name
Type
Description
Accept

String

application/json

Content-Type

String

application/json

200
400
Copy
OK
Note that data_size is requested in addition to data root, because one may submit the same data root with different transaction sizes. To avoid chunks overlap, data root always comes together with the size.

Download Chunks
Get Transaction Data
GET https://arweave.net/tx/{id}/data

The endpoint serves data regardless of how it was uploaded

Path Parameters
Name
Type
Description
id

String

Transaction ID

200
400
503
Copy
<Base64URL encoded data>
Get Transaction Offset and Size
GET https://arweave.net/tx/{id}/offset

Get the absolute end offset and size of the transaction

Note that the client may use this information to collect transaction chunks. Start with the end offset and fetch a chunk via GET /chunk/<offset>. Subtract its size from the transaction size, if there are more chunks to fetch, subtract the size of the chunk from the offset and fetch the next chunk.

Path Parameters
Name
Type
Description
id

String

Transaction ID

200
400
503
Copy
{ "offset": "...", "size": "..." }